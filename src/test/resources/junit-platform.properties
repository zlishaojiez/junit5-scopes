# You can use the junit.jupiter.displayname.generator.default configuration parameter to specify the fully qualified class name of the DisplayNameGenerator you would like to use by default
# Similarly, you can specify the fully qualified name of any custom class that implements DisplayNameGenerator

#junit.jupiter.displayname.generator.default = org.junit.jupiter.api.DisplayNameGenerator$ReplaceUnderscores
#junit.jupiter.displayname.generator.default = cn.shaojiel.junit5.generator.CustomDisplayNameGenerator


#You can use the junit.jupiter.testmethod.order.default configuration parameter to specify the fully qualified class name
#of the MethodOrderer you would like to use by default. Just like for the orderer configured via the @TestMethodOrder annotation,
#the supplied class has to implement the MethodOrderer interface.
#The default orderer will be used for all tests unless the @TestMethodOrder annotation is present on an enclosing test class or test interface.

#junit.jupiter.testmethod.order.default = org.junit.jupiter.api.MethodOrderer$OrderAnnotation
#junit.jupiter.testmethod.order.default = cn.shaojiel.junit5.annotation.order.method.custom.CustomMethodOrder


#To configure test class execution order globally for the entire test suite,
# use the junit.jupiter.testclass.order.default configuration parameter to specify the fully qualified class name of the ClassOrderer
# you would like to use. The supplied class must implement the ClassOrderer interface.
#For example, for the @Order annotation to be honored on test classes, you should configure the ClassOrderer.OrderAnnotation class orderer
# using the configuration parameter with the corresponding fully qualified class name

#junit.jupiter.testclass.order.default = org.junit.jupiter.api.ClassOrderer$OrderAnnotation
#junit.jupiter.testclass.order.default = cn.shaojiel.junit5.annotation.order.clazz.custom.CustomClassOrder